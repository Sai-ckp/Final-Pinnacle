name: Build and deploy Python app to Azure Web App - pinnaclecollege

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Copy your code into an artifact folder (exclude only junk; KEEP Django apps)
      - name: üì¶ Prepare artifact folder
        run: |
          shopt -s dotglob
          mkdir -p artifact
          rsync -av \
            --delete \
            --exclude='.git' \
            --exclude='venv' \
            --exclude='env' \
            --exclude='artifact' \
            --exclude='__pycache__' \
            --exclude='.pytest_cache' \
            --exclude='.mypy_cache' \
            --exclude='*.pyc' \
            --exclude='*.log' \
            --exclude='*.zip' \
            --exclude='*.tar' \
            --exclude='*.tar.gz' \
            --exclude='downloads' \
            --exclude='excel_uploads' \
            --exclude='media' \
            --exclude='uploads' \
            ./ artifact/

      # Install runtime deps INTO the artifact so App Service finds them
      - name: üì¶ Vendor Python dependencies into artifact
        run: |
          python -m pip install --upgrade pip
          mkdir -p artifact/.python_packages/lib/site-packages
          pip install -r artifact/requirements.txt -t artifact/.python_packages/lib/site-packages

      - name: üîç Sanity check artifact contents
        run: |
          echo "Top level:" && ls -la artifact | sed -n '1,120p'
          echo "Expect to see: manage.py, requirements.txt, student_alerts_app/ ..."
          test -f artifact/manage.py && echo "‚úÖ manage.py present" || (echo "‚ùå manage.py missing" && exit 1)
          test -f artifact/requirements.txt && echo "‚úÖ requirements.txt present" || (echo "‚ùå requirements.txt missing" && exit 1)
          test -f artifact/student_alerts_app/wsgi.py && echo "‚úÖ wsgi present" || (echo "‚ùå wsgi missing" && exit 1)
          du -sh artifact || true

      - name: ‚¨ÜÔ∏è Upload artifact (folder)
        uses: actions/upload-artifact@v4
        with:
          name: python-app-folder
          path: artifact

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: ‚¨áÔ∏è Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app-folder
          path: app

      - name: üìÇ Show what will be deployed
        run: |
          echo "app/ listing:"
          ls -la app | sed -n '1,200p'
          echo "Expect to see your Django code & .python_packages here."

      - name: üîê Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      # Configure app once per deploy (idempotent)
      - name: ‚öôÔ∏è Configure Web App (no Oryx, no RFP, set PYTHONPATH & startup)
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            # Turn OFF Run-From-Package so the folder gets extracted to wwwroot
            az webapp config appsettings set -g pinnacle -n pinnaclecollege \
              --settings WEBSITE_RUN_FROM_PACKAGE=0 \
                         SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                         ENABLE_ORYX_BUILD=false \
                         PYTHONPATH=/home/site/wwwroot/.python_packages/lib/site-packages

            # Gunicorn startup (uses platform $PORT)
            az webapp config set -g pinnacle -n pinnaclecollege \
              --startup-file "gunicorn student_alerts_app.wsgi:application --bind=0.0.0.0:\$PORT"

            # (Optional) enable container logs for easier debugging
            az webapp log config -g pinnacle -n pinnaclecollege \
              --docker-container-logging filesystem --level information

            # DB env vars (values come from repo secrets)
            az webapp config appsettings set -g pinnacle -n pinnaclecollege --settings \
              DB_NAME='${{ secrets.DB_NAME }}' \
              DB_USER='${{ secrets.DB_USER }}' \
              DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              DB_HOST='${{ secrets.DB_HOST }}' \
              DB_PORT='${{ secrets.DB_PORT }}'

      # Refresh token just before deploy so upload doesn't hit token expiry
      - name: üîê Azure login (refresh before deploy)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      - name: üöÄ Deploy folder to Azure Web App (OneDeploy)
        uses: azure/webapps-deploy@v3
        with:
          app-name: pinnaclecollege
          slot-name: Production
          package: app      # <-- deploy the folder so files appear under /home/site/wwwroot
